// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "library-pskel.hxx"

// ObjectsType_pskel
//

void ObjectsType_pskel::
object_parser (::object_pskel& p)
{
  this->object_parser_ = &p;
}

void ObjectsType_pskel::
parsers (::object_pskel& object)
{
  this->object_parser_ = &object;
}

ObjectsType_pskel::
ObjectsType_pskel ()
: object_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// GroupsType_pskel
//

void GroupsType_pskel::
group_parser (::group_pskel& p)
{
  this->group_parser_ = &p;
}

void GroupsType_pskel::
parsers (::group_pskel& group)
{
  this->group_parser_ = &group;
}

GroupsType_pskel::
GroupsType_pskel ()
: group_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// EnumeratesType_pskel
//

void EnumeratesType_pskel::
user_type_parser (::user_type_pskel& p)
{
  this->user_type_parser_ = &p;
}

void EnumeratesType_pskel::
parsers (::user_type_pskel& user_type)
{
  this->user_type_parser_ = &user_type;
}

EnumeratesType_pskel::
EnumeratesType_pskel ()
: user_type_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// object_library_pskel
//

void object_library_pskel::
objects_parser (::ObjectsType_pskel& p)
{
  this->objects_parser_ = &p;
}

void object_library_pskel::
groups_parser (::GroupsType_pskel& p)
{
  this->groups_parser_ = &p;
}

void object_library_pskel::
user_types_parser (::EnumeratesType_pskel& p)
{
  this->user_types_parser_ = &p;
}

void object_library_pskel::
parsers (::ObjectsType_pskel& objects,
         ::GroupsType_pskel& groups,
         ::EnumeratesType_pskel& user_types)
{
  this->objects_parser_ = &objects;
  this->groups_parser_ = &groups;
  this->user_types_parser_ = &user_types;
}

object_library_pskel::
object_library_pskel ()
: objects_parser_ (0),
  groups_parser_ (0),
  user_types_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// object_pskel
//

void object_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void object_pskel::
comment_parser (::xml_schema::string_pskel& p)
{
  this->comment_parser_ = &p;
}

void object_pskel::
attributes_parser (::attributes_pskel& p)
{
  this->attributes_parser_ = &p;
}

void object_pskel::
id_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->id_parser_ = &p;
}

void object_pskel::
group_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->group_parser_ = &p;
}

void object_pskel::
visible_parser (::AttrVisualStyles_pskel& p)
{
  this->visible_parser_ = &p;
}

void object_pskel::
parent_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->parent_parser_ = &p;
}

void object_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::string_pskel& comment,
         ::attributes_pskel& attributes,
         ::xml_schema::unsigned_int_pskel& id,
         ::xml_schema::unsigned_int_pskel& group,
         ::AttrVisualStyles_pskel& visible,
         ::xml_schema::unsigned_int_pskel& parent)
{
  this->name_parser_ = &name;
  this->comment_parser_ = &comment;
  this->attributes_parser_ = &attributes;
  this->id_parser_ = &id;
  this->group_parser_ = &group;
  this->visible_parser_ = &visible;
  this->parent_parser_ = &parent;
}

object_pskel::
object_pskel ()
: name_parser_ (0),
  comment_parser_ (0),
  attributes_parser_ (0),
  id_parser_ (0),
  group_parser_ (0),
  visible_parser_ (0),
  parent_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// group_pskel
//

void group_pskel::
id_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->id_parser_ = &p;
}

void group_pskel::
parent_id_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->parent_id_parser_ = &p;
}

void group_pskel::
parsers (::xml_schema::unsigned_int_pskel& id,
         ::xml_schema::unsigned_int_pskel& parent_id)
{
  this->id_parser_ = &id;
  this->parent_id_parser_ = &parent_id;
}

group_pskel::
group_pskel ()
: id_parser_ (0),
  parent_id_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// user_type_pskel
//

void user_type_pskel::
element_parser (::xml_schema::string_pskel& p)
{
  this->element_parser_ = &p;
}

void user_type_pskel::
id_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->id_parser_ = &p;
}

void user_type_pskel::
alias_parser (::xml_schema::string_pskel& p)
{
  this->alias_parser_ = &p;
}

void user_type_pskel::
parsers (::xml_schema::string_pskel& element,
         ::xml_schema::unsigned_int_pskel& id,
         ::xml_schema::string_pskel& alias)
{
  this->element_parser_ = &element;
  this->id_parser_ = &id;
  this->alias_parser_ = &alias;
}

user_type_pskel::
user_type_pskel ()
: element_parser_ (0),
  id_parser_ (0),
  alias_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// attributes_pskel
//

void attributes_pskel::
attribute_parser (::attribute_pskel& p)
{
  this->attribute_parser_ = &p;
}

void attributes_pskel::
parsers (::attribute_pskel& attribute)
{
  this->attribute_parser_ = &attribute;
}

attributes_pskel::
attributes_pskel ()
: attribute_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// attribute_pskel
//

void attribute_pskel::
type_parser (::AttrTypes_pskel& p)
{
  this->type_parser_ = &p;
}

void attribute_pskel::
user_type_id_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->user_type_id_parser_ = &p;
}

void attribute_pskel::
parsers (::AttrTypes_pskel& type,
         ::xml_schema::unsigned_int_pskel& user_type_id)
{
  this->type_parser_ = &type;
  this->user_type_id_parser_ = &user_type_id;
}

attribute_pskel::
attribute_pskel ()
: type_parser_ (0),
  user_type_id_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// AttrTypes_pskel
//

void AttrTypes_pskel::
post_AttrTypes ()
{
}

// AttrVisualStyles_pskel
//

void AttrVisualStyles_pskel::
post_AttrVisualStyles ()
{
}

// ObjectsType_pskel
//

void ObjectsType_pskel::
object ()
{
}

void ObjectsType_pskel::
post_ObjectsType ()
{
}

// GroupsType_pskel
//

void GroupsType_pskel::
group ()
{
}

void GroupsType_pskel::
post_GroupsType ()
{
}

// EnumeratesType_pskel
//

void EnumeratesType_pskel::
user_type ()
{
}

void EnumeratesType_pskel::
post_EnumeratesType ()
{
}

// object_library_pskel
//

void object_library_pskel::
objects ()
{
}

void object_library_pskel::
groups ()
{
}

void object_library_pskel::
user_types ()
{
}

void object_library_pskel::
post_object_library ()
{
}

// object_pskel
//

void object_pskel::
name (const ::std::string&)
{
}

void object_pskel::
comment (const ::std::string&)
{
}

void object_pskel::
attributes ()
{
}

void object_pskel::
id (unsigned int)
{
}

void object_pskel::
group (unsigned int)
{
}

void object_pskel::
visible ()
{
}

void object_pskel::
parent (unsigned int)
{
}

void object_pskel::
post_object ()
{
}

// group_pskel
//

void group_pskel::
id (unsigned int)
{
}

void group_pskel::
parent_id (unsigned int)
{
}

void group_pskel::
post_group ()
{
}

// user_type_pskel
//

void user_type_pskel::
element (const ::std::string&)
{
}

void user_type_pskel::
id (unsigned int)
{
}

void user_type_pskel::
alias (const ::std::string&)
{
}

void user_type_pskel::
post_user_type ()
{
}

// attributes_pskel
//

void attributes_pskel::
attribute ()
{
}

void attributes_pskel::
post_attributes ()
{
}

// attribute_pskel
//

void attribute_pskel::
type ()
{
}

void attribute_pskel::
user_type_id (unsigned int)
{
}

void attribute_pskel::
post_attribute ()
{
}

#include <cassert>

// Element validation and dispatch functions for ObjectsType_pskel.
//
bool ObjectsType_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "object" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &ObjectsType_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool ObjectsType_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void ObjectsType_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void ObjectsType_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void ObjectsType_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "object" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->object_parser_;

          if (this->object_parser_)
            this->object_parser_->pre ();
        }
        else
        {
          if (this->object_parser_)
          {
            this->object_parser_->post_object ();
            this->object ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for GroupsType_pskel.
//
bool GroupsType_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "group" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &GroupsType_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool GroupsType_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void GroupsType_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void GroupsType_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void GroupsType_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "group" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->group_parser_;

          if (this->group_parser_)
            this->group_parser_->pre ();
        }
        else
        {
          if (this->group_parser_)
          {
            this->group_parser_->post_group ();
            this->group ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for EnumeratesType_pskel.
//
bool EnumeratesType_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "user_type" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &EnumeratesType_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool EnumeratesType_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void EnumeratesType_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void EnumeratesType_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void EnumeratesType_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "user_type" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->user_type_parser_;

          if (this->user_type_parser_)
            this->user_type_parser_->pre ();
        }
        else
        {
          if (this->user_type_parser_)
          {
            this->user_type_parser_->post_user_type ();
            this->user_type ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for object_library_pskel.
//
bool object_library_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "objects" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &object_library_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "objects",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool object_library_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void object_library_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void object_library_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "objects");

  this->v_state_stack_.pop ();
}

void object_library_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "objects" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->objects_parser_;

          if (this->objects_parser_)
            this->objects_parser_->pre ();
        }
        else
        {
          if (this->objects_parser_)
          {
            this->objects_parser_->post_ObjectsType ();
            this->objects ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "objects",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "groups" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->groups_parser_;

          if (this->groups_parser_)
            this->groups_parser_->pre ();
        }
        else
        {
          if (this->groups_parser_)
          {
            this->groups_parser_->post_GroupsType ();
            this->groups ();
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "user_types" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->user_types_parser_;

          if (this->user_types_parser_)
            this->user_types_parser_->pre ();
        }
        else
        {
          if (this->user_types_parser_)
          {
            this->user_types_parser_->post_EnumeratesType ();
            this->user_types ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for object_pskel.
//
bool object_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &object_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool object_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void object_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void object_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void object_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            const ::std::string& tmp (this->name_parser_->post_string ());
            this->name (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "comment" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->comment_parser_;

          if (this->comment_parser_)
            this->comment_parser_->pre ();
        }
        else
        {
          if (this->comment_parser_)
          {
            const ::std::string& tmp (this->comment_parser_->post_string ());
            this->comment (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "attributes" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->attributes_parser_;

          if (this->attributes_parser_)
            this->attributes_parser_->pre ();
        }
        else
        {
          if (this->attributes_parser_)
          {
            this->attributes_parser_->post_attributes ();
            this->attributes ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "attributes",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for user_type_pskel.
//
bool user_type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "element" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &user_type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "element",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool user_type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void user_type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void user_type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "element");

  this->v_state_stack_.pop ();
}

void user_type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "element" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->element_parser_;

          if (this->element_parser_)
            this->element_parser_->pre ();
        }
        else
        {
          if (this->element_parser_)
          {
            const ::std::string& tmp (this->element_parser_->post_string ());
            this->element (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "element",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for attributes_pskel.
//
bool attributes_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "attribute" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &attributes_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool attributes_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void attributes_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void attributes_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void attributes_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "attribute" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->attribute_parser_;

          if (this->attribute_parser_)
            this->attribute_parser_->pre ();
        }
        else
        {
          if (this->attribute_parser_)
          {
            this->attribute_parser_->post_attribute ();
            this->attribute ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Attribute validation and dispatch functions for object_pskel.
//
bool object_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "id" && ns.empty ())
  {
    if (this->id_parser_)
    {
      this->id_parser_->pre ();
      this->id_parser_->_pre_impl ();
      this->id_parser_->_characters (s);
      this->id_parser_->_post_impl ();
      unsigned int tmp (this->id_parser_->post_unsigned_int ());
      this->id (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
    return true;
  }

  if (n == "group" && ns.empty ())
  {
    if (this->group_parser_)
    {
      this->group_parser_->pre ();
      this->group_parser_->_pre_impl ();
      this->group_parser_->_characters (s);
      this->group_parser_->_post_impl ();
      unsigned int tmp (this->group_parser_->post_unsigned_int ());
      this->group (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->group = true;
    return true;
  }

  if (n == "visible" && ns.empty ())
  {
    if (this->visible_parser_)
    {
      this->visible_parser_->pre ();
      this->visible_parser_->_pre_impl ();
      this->visible_parser_->_characters (s);
      this->visible_parser_->_post_impl ();
      this->visible_parser_->post_AttrVisualStyles ();
      this->visible ();
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->visible = true;
    return true;
  }

  if (n == "parent" && ns.empty ())
  {
    if (this->parent_parser_)
    {
      this->parent_parser_->pre ();
      this->parent_parser_->_pre_impl ();
      this->parent_parser_->_characters (s);
      this->parent_parser_->_post_impl ();
      unsigned int tmp (this->parent_parser_->post_unsigned_int ());
      this->parent (tmp);
    }

    return true;
  }

  return false;
}

void object_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.id = false;
  as.group = false;
  as.visible = false;
}

void object_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.id)
    this->_expected_attribute (
      "", "id");
  if (!as.group)
    this->_expected_attribute (
      "", "group");
  if (!as.visible)
    this->_expected_attribute (
      "", "visible");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for group_pskel.
//
bool group_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "id" && ns.empty ())
  {
    if (this->id_parser_)
    {
      this->id_parser_->pre ();
      this->id_parser_->_pre_impl ();
      this->id_parser_->_characters (s);
      this->id_parser_->_post_impl ();
      unsigned int tmp (this->id_parser_->post_unsigned_int ());
      this->id (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
    return true;
  }

  if (n == "parent_id" && ns.empty ())
  {
    if (this->parent_id_parser_)
    {
      this->parent_id_parser_->pre ();
      this->parent_id_parser_->_pre_impl ();
      this->parent_id_parser_->_characters (s);
      this->parent_id_parser_->_post_impl ();
      unsigned int tmp (this->parent_id_parser_->post_unsigned_int ());
      this->parent_id (tmp);
    }

    return true;
  }

  return this->::xml_schema::string_pskel::_attribute_impl_phase_one (ns, n, s);
}

void group_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.id = false;
  this->::xml_schema::string_pskel::_pre_a_validate ();
}

void group_pskel::
_post_a_validate ()
{
  this->::xml_schema::string_pskel::_post_a_validate ();

  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.id)
    this->_expected_attribute (
      "", "id");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for user_type_pskel.
//
bool user_type_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "id" && ns.empty ())
  {
    if (this->id_parser_)
    {
      this->id_parser_->pre ();
      this->id_parser_->_pre_impl ();
      this->id_parser_->_characters (s);
      this->id_parser_->_post_impl ();
      unsigned int tmp (this->id_parser_->post_unsigned_int ());
      this->id (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
    return true;
  }

  if (n == "alias" && ns.empty ())
  {
    if (this->alias_parser_)
    {
      this->alias_parser_->pre ();
      this->alias_parser_->_pre_impl ();
      this->alias_parser_->_characters (s);
      this->alias_parser_->_post_impl ();
      const ::std::string& tmp (this->alias_parser_->post_string ());
      this->alias (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->alias = true;
    return true;
  }

  return false;
}

void user_type_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.id = false;
  as.alias = false;
}

void user_type_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.id)
    this->_expected_attribute (
      "", "id");
  if (!as.alias)
    this->_expected_attribute (
      "", "alias");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for attribute_pskel.
//
bool attribute_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "type" && ns.empty ())
  {
    if (this->type_parser_)
    {
      this->type_parser_->pre ();
      this->type_parser_->_pre_impl ();
      this->type_parser_->_characters (s);
      this->type_parser_->_post_impl ();
      this->type_parser_->post_AttrTypes ();
      this->type ();
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
    return true;
  }

  if (n == "user_type_id" && ns.empty ())
  {
    if (this->user_type_id_parser_)
    {
      this->user_type_id_parser_->pre ();
      this->user_type_id_parser_->_pre_impl ();
      this->user_type_id_parser_->_characters (s);
      this->user_type_id_parser_->_post_impl ();
      unsigned int tmp (this->user_type_id_parser_->post_unsigned_int ());
      this->user_type_id (tmp);
    }

    return true;
  }

  return this->::xml_schema::string_pskel::_attribute_impl_phase_one (ns, n, s);
}

void attribute_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.type = false;
  this->::xml_schema::string_pskel::_pre_a_validate ();
}

void attribute_pskel::
_post_a_validate ()
{
  this->::xml_schema::string_pskel::_post_a_validate ();

  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.type)
    this->_expected_attribute (
      "", "type");

  this->v_state_attr_stack_.pop ();
}

// Begin epilogue.
//
//
// End epilogue.

